// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}


//courses
model Courses{
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description String
  created_at  DateTime
  updated_at  DateTime
  sections    Section[]  
  price       Int
  author_email String
  author_id    String  
  thumbnail    String?
  language     String
  rating       Float   @default(0.0)
  enrollments_count Int @default(0)
  is_published Boolean @default(false)
  topics_covered String[]
  total_duration  Float @default(0)
  PurchasedDetails PurchasedDetails[]
 

  @@index([name])

  
}

model Section {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  course_id    String  @db.ObjectId
  course       Courses   @relation( fields: [course_id], references: [id],onDelete: Cascade, onUpdate: Cascade)
  created_at  DateTime
  updated_at  DateTime
  section_duration String
  videos       Video[]
  order        Int
}

model Video {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  url           String
  course_id     String        @db.ObjectId
  section_id    String        @db.ObjectId
  section       Section     @relation( fields: [section_id], references: [id] ,onDelete: Cascade, onUpdate: Cascade)
  created_at    DateTime
  resources     Resource[] 
}

model Resource {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  video_id      String        @db.ObjectId
  video         Video       @relation(fields: [video_id], references: [id],onDelete: Cascade, onUpdate: Cascade)
  name         String
  url           String
  type          ResourceType
}

enum ResourceType {
  DOCUMENT
  LINK
  AUDIO
  OTHER
}



//purchased course 

model PurchasedDetails {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  user_id       String    @db.ObjectId
  course_id     String    @db.ObjectId
  purchase_date DateTime  @default(now())
  payment_status PaymentStatus @default(PENDING)
  course        Courses   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user_email    String    
}

enum PaymentStatus {
  PAID
  PENDING
  FAILED
}

